---
name: deploy

on:
  # triggered automatically when a new release is published
  release:
    types: [published]

  # triggered manually via the GitHub UI
  workflow_dispatch:
    inputs:
      tag:
        description: 'The git tag of the release to upload assets to (e.g., v0.1.0-test).'
        required: true

permissions:
  contents: write

jobs:
  build-executables:
    name: Build Standalone Executables
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: python -m pip install poetry

      - name: Install dependencies
        run: poetry install --no-interaction

      # 1. install pyinstaller *inside* the poetry environment
      - name: Install PyInstaller in Poetry environment
        run: poetry run python -m pip install pyinstaller

      # 2. build with pyinstaller, also *inside* the poetry environment
      - name: Build with PyInstaller
        id: build-exe
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            OUTPUT_NAME="cr-manager-linux"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            OUTPUT_NAME="cr-manager-macos"
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            OUTPUT_NAME="cr-manager"
          fi

          # execute pyinstaller using `poetry run`
          poetry run pyinstaller --name "${OUTPUT_NAME}" \
                                 --onefile \
                                 --clean \
                                 "${{ github.workspace }}/main.py"

          if [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "ASSET_PATH=dist/${OUTPUT_NAME}.exe" >> "${GITHUB_OUTPUT}"
          else
            echo "ASSET_PATH=dist/${OUTPUT_NAME}" >> "${GITHUB_OUTPUT}"
          fi

      # the UPX and upload steps can be added back here if needed, they were correct.
      - name: Upload Release Asset
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_TAG: ${{ github.event.inputs.tag || github.ref_name }}
        run: |
          gh release upload "${RELEASE_TAG}" "${{ steps.build-exe.outputs.ASSET_PATH }}" --clobber
